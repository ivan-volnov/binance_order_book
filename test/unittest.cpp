#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <fstream>
#include <json.hpp>
#include "utility/stopwatch.h"
#include "../src/order_book.hpp"



TEST_CASE("Parsing speed test")
{
    using namespace std::chrono_literals;
    Stopwatch sw;
    OrderBook book;
    std::ifstream input("binance-btcusdt.jsonl"); // Please fix the filepath if it differs on your system
    nlohmann::json json;
    // TODO: try a faster json parser implementation
    uint64_t U, u{};
    std::string line;
    while (std::getline(input, line)) {
        json = nlohmann::json::parse(line).at("data");
        U = json.at("U").get<uint64_t>();
        if (!u) {
            u = U - 1; // TODO: use lastUpdateId from depth snapshot
        }
        REQUIRE(u + 1 == U);
        u = json.at("u").get<uint64_t>();
        auto &bids = json.at("b");
        for (const auto &value : bids) {
            book.set_bid(std::stod(value.at(0).get<std::string>()), std::stod(value.at(1).get<std::string>()));
        }
        auto &asks = json.at("a");
        for (const auto &value : asks) {
            book.set_ask(std::stod(value.at(0).get<std::string>()), std::stod(value.at(1).get<std::string>()));
        }
        book.set_update_ts(json.at("E").get<uint64_t>());
    }
    REQUIRE(sw.elapsed() < 1500ms);
}

TEST_CASE("OrderBook test")
{
    OrderBook book;
    REQUIRE(book.is_empty());

    for (int i = 0; i < 20; ++i) {
        book.set_ask(1000 + i, 1000 + i);
        book.set_bid(10 + i, 2000 + i);
    }
    REQUIRE(!book.is_empty());

    SECTION("straight order") {
        std::stringstream ss;
        ss << book;
        REQUIRE(ss.str() == R"({"a":[[1019.00000000,1019.00000000],[1018.00000000,1018.00000000],[1017.00000000,1017.00000000],[1016.00000000,1016.00000000],[1015.00000000,1015.00000000],[1014.00000000,1014.00000000],[1013.00000000,1013.00000000],[1012.00000000,1012.00000000],[1011.00000000,1011.00000000],[1010.00000000,1010.00000000],[1009.00000000,1009.00000000],[1008.00000000,1008.00000000],[1007.00000000,1007.00000000],[1006.00000000,1006.00000000],[1005.00000000,1005.00000000],[1004.00000000,1004.00000000],[1003.00000000,1003.00000000],[1002.00000000,1002.00000000],[1001.00000000,1001.00000000],[1000.00000000,1000.00000000]],"b":[[29.00000000,2019.00000000],[28.00000000,2018.00000000],[27.00000000,2017.00000000],[26.00000000,2016.00000000],[25.00000000,2015.00000000],[24.00000000,2014.00000000],[23.00000000,2013.00000000],[22.00000000,2012.00000000],[21.00000000,2011.00000000],[20.00000000,2010.00000000],[19.00000000,2009.00000000],[18.00000000,2008.00000000],[17.00000000,2007.00000000],[16.00000000,2006.00000000],[15.00000000,2005.00000000],[14.00000000,2004.00000000],[13.00000000,2003.00000000],[12.00000000,2002.00000000],[11.00000000,2001.00000000],[10.00000000,2000.00000000]]})");
    }

    SECTION("reverse order") {
        book.set_reverse(true);
        std::stringstream ss;
        ss << book;
        REQUIRE(ss.str() == R"({"b":[[10.00000000,2000.00000000],[11.00000000,2001.00000000],[12.00000000,2002.00000000],[13.00000000,2003.00000000],[14.00000000,2004.00000000],[15.00000000,2005.00000000],[16.00000000,2006.00000000],[17.00000000,2007.00000000],[18.00000000,2008.00000000],[19.00000000,2009.00000000],[20.00000000,2010.00000000],[21.00000000,2011.00000000],[22.00000000,2012.00000000],[23.00000000,2013.00000000],[24.00000000,2014.00000000],[25.00000000,2015.00000000],[26.00000000,2016.00000000],[27.00000000,2017.00000000],[28.00000000,2018.00000000],[29.00000000,2019.00000000]],"a":[[1000.00000000,1000.00000000],[1001.00000000,1001.00000000],[1002.00000000,1002.00000000],[1003.00000000,1003.00000000],[1004.00000000,1004.00000000],[1005.00000000,1005.00000000],[1006.00000000,1006.00000000],[1007.00000000,1007.00000000],[1008.00000000,1008.00000000],[1009.00000000,1009.00000000],[1010.00000000,1010.00000000],[1011.00000000,1011.00000000],[1012.00000000,1012.00000000],[1013.00000000,1013.00000000],[1014.00000000,1014.00000000],[1015.00000000,1015.00000000],[1016.00000000,1016.00000000],[1017.00000000,1017.00000000],[1018.00000000,1018.00000000],[1019.00000000,1019.00000000]]})");
    }

    SECTION("update price level") {
        book.set_ask(1019.00000001, 99.00000001);
        book.set_bid(29, 99);
        std::stringstream ss;
        ss << book;
        REQUIRE(ss.str() == R"({"a":[[1019.00000001,99.00000001],[1019.00000000,1019.00000000],[1018.00000000,1018.00000000],[1017.00000000,1017.00000000],[1016.00000000,1016.00000000],[1015.00000000,1015.00000000],[1014.00000000,1014.00000000],[1013.00000000,1013.00000000],[1012.00000000,1012.00000000],[1011.00000000,1011.00000000],[1010.00000000,1010.00000000],[1009.00000000,1009.00000000],[1008.00000000,1008.00000000],[1007.00000000,1007.00000000],[1006.00000000,1006.00000000],[1005.00000000,1005.00000000],[1004.00000000,1004.00000000],[1003.00000000,1003.00000000],[1002.00000000,1002.00000000],[1001.00000000,1001.00000000],[1000.00000000,1000.00000000]],"b":[[29.00000000,99.00000000],[28.00000000,2018.00000000],[27.00000000,2017.00000000],[26.00000000,2016.00000000],[25.00000000,2015.00000000],[24.00000000,2014.00000000],[23.00000000,2013.00000000],[22.00000000,2012.00000000],[21.00000000,2011.00000000],[20.00000000,2010.00000000],[19.00000000,2009.00000000],[18.00000000,2008.00000000],[17.00000000,2007.00000000],[16.00000000,2006.00000000],[15.00000000,2005.00000000],[14.00000000,2004.00000000],[13.00000000,2003.00000000],[12.00000000,2002.00000000],[11.00000000,2001.00000000],[10.00000000,2000.00000000]]})");
    }

    SECTION("remove price level") {
        book.set_ask(1018, 0);
        book.set_bid(28, 0);
        std::stringstream ss;
        ss << book;
        REQUIRE(ss.str() == R"({"a":[[1019.00000000,1019.00000000],[1017.00000000,1017.00000000],[1016.00000000,1016.00000000],[1015.00000000,1015.00000000],[1014.00000000,1014.00000000],[1013.00000000,1013.00000000],[1012.00000000,1012.00000000],[1011.00000000,1011.00000000],[1010.00000000,1010.00000000],[1009.00000000,1009.00000000],[1008.00000000,1008.00000000],[1007.00000000,1007.00000000],[1006.00000000,1006.00000000],[1005.00000000,1005.00000000],[1004.00000000,1004.00000000],[1003.00000000,1003.00000000],[1002.00000000,1002.00000000],[1001.00000000,1001.00000000],[1000.00000000,1000.00000000]],"b":[[29.00000000,2019.00000000],[27.00000000,2017.00000000],[26.00000000,2016.00000000],[25.00000000,2015.00000000],[24.00000000,2014.00000000],[23.00000000,2013.00000000],[22.00000000,2012.00000000],[21.00000000,2011.00000000],[20.00000000,2010.00000000],[19.00000000,2009.00000000],[18.00000000,2008.00000000],[17.00000000,2007.00000000],[16.00000000,2006.00000000],[15.00000000,2005.00000000],[14.00000000,2004.00000000],[13.00000000,2003.00000000],[12.00000000,2002.00000000],[11.00000000,2001.00000000],[10.00000000,2000.00000000]]})");
    }

    SECTION("depth limit test") {
        book.set_depth(10);
        std::stringstream ss;
        ss << book;
        REQUIRE(ss.str() == R"({"a":[[1009.00000000,1009.00000000],[1008.00000000,1008.00000000],[1007.00000000,1007.00000000],[1006.00000000,1006.00000000],[1005.00000000,1005.00000000],[1004.00000000,1004.00000000],[1003.00000000,1003.00000000],[1002.00000000,1002.00000000],[1001.00000000,1001.00000000],[1000.00000000,1000.00000000]],"b":[[29.00000000,2019.00000000],[28.00000000,2018.00000000],[27.00000000,2017.00000000],[26.00000000,2016.00000000],[25.00000000,2015.00000000],[24.00000000,2014.00000000],[23.00000000,2013.00000000],[22.00000000,2012.00000000],[21.00000000,2011.00000000],[20.00000000,2010.00000000]]})");
        book.set_ask(1019, 88);
        book.set_bid(10, 99);
        std::stringstream ss2;
        ss2 << book;
        REQUIRE(ss.str() == ss2.str());
    }
}
